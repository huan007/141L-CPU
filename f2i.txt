101011000	\\imme $r0 22 //MSHLoc
011010000	\\lw $r0 $r0
100000110	\\imme $r2 1
100011111	\\imme $r3 7
001001110	\\lsl $r2 $r3
010100010	\\and $r2 $r0
101100101	\\imme $r1 25 //Signloc
011000110	\\sw $r2 $r1
101111101	\\imme $r1 31
100001010	\\imme $r2 2
001001001	\\lsl $r1 $r2
010100001	\\and $r1 $r0
001101001	\\lsr $r1 $r2
000010110	\\addc $r2 $r1
010101000	\\and $r0 $r2
100000010	\\imme $r2 0
011101001	\\cmp $r1 $r2
111000101	\\bne 5 NOTEQ
011101011	\\cmp $r3 $r2
111000101	\\bne 5 EQ
	\\NOTEQ
100010010	\\imme $r2 4
000001000	\\add $r0 $r2
	\\EQ
101111010	\\imme $r2 30 // Actually 30
011101001	\\cmp $r1 $r2
110000110	\\blt 6 NoOVERFLOW (+11)
	\\Overflow
101001100	\\imme $r0 19 //FF
101110001	\\imme $r1 28 //7f
101100110	\\imme $r2 25 //Signloc
011011010	\\lw $r2 $r2
010111001	\\or $r1 $r2
101101110	\\imme $r2 27 //MSHend
101101011	\\imme $r3 26 //LSHend
011001100	\\sw $r0 $r3
011001001	\\sw $r1 $r2
011100001	\\HALT 1 //Halt with error
	\\NO Overflow
101100110	\\imme $r2 25
011100110	\\cmp $r2 $r1
110000111	\\blt 7 POS (+10)
011101001	\\cmp $r1 $r2
110001000	\\blt 8 NEGA
	\\EQUAL
101100110	\\imme $r2 25 //Signloc
011011010	\\lw $r2 $r2
010111000	\\or $r0 $r2
101101101	\\imme $r1 27 //MSHend
011000100	\\sw $r0 $r1
101011100	\\imme $r0 23 //LSHloc
101101001	\\imme $r1 26 //LSHend
011010000	\\lw $r0 $r0
011000100	\\sw $r0 $r1
011100000	\\HALT 0
	\\POS //Left shift mantissa
000101001	\\sub $r1 $r2
101011110	\\imme $r2 23 //LSHloc
011011010	\\lw $r2 $r2
100000011	\\imme $r3 0
	\\loop1:
001010110	\\lslc $r2 $r1
001011100	\\lslc $r0 $r3
000110101	\\subc $r1 $r1
011101101	\\cmp $r1 $r3
111001001	\\bne 9 loop1 (-4)
101100101	\\imme $r1 25 //Signloc
011010101	\\lw $r1 $r1
010110100	\\or $r0 $r1
101101101	\\imme $r1 27 //MSHend
011000100	\\sw $r0 $r1
101101001	\\imme $r1 26 //LSHend
011000110	\\sw $r2 $r1
011100000	\\Halt 0
	\\NEGA //Right shift & round
001010111	\\lslc $r3 $r1
011101101	\\cmp $r1 $r3
110001010	\\blt 10 UNDERFLOW
000100110	\\sub $r2 $r1
101011101	\\imme $r1 23 //LSHloc
011010101	\\lw $r1 $r1
100000011	\\imme $r3 0
	\\loop2:
001110100	\\lsrc $r0 $r1
001111101	\\lsrc $r1 $r3
000011111	\\addc $r3 $r3
011111111	\\asw $r3
101101111	\\imme $r3 27 //MSHend
011001100	\\sw $r0 $r3
100111000	\\imme $r0 14 //Sloc
011010000	\\lw $r0 $r0
011111011	\\alw $r3
000001100	\\add $r0 $r3
100111011	\\imme $r3 14 //Sloc
011001100	\\sw $r0 $r3
101101100	\\imme $r0 27 //MSHend
011010000	\\lw $r0 $r0
100000011	\\imme $r3 0
000110110	\\subc $r2 $r1
011101110	\\cmp $r2 $r3
111001011	\\bne 11 loop2 (-7)
100111011	\\imme $r3 14 //Sloc
011011111	\\lw $r3 $r3
011111010	\\alw $r2
000101011	\\sub $r3 $r2
011111111	\\asw $r3
100000111	\\imme $r3 1
011101011	\\cmp $r3 $r2
111001100	\\bne 12 NOROUND (+13)
010100111	\\and $r3 $r1
100000110	\\imme $r2 1
011101011	\\cmp $r3 $r2
111001101	\\bne 13 ROUND (+7)
011111011	\\alw $r3
011101011	\\cmp $r3 $r2
111001110	\\bne 14 ROUND (+4)
100000111	\\imme $r3 1
011101111	\\cmp $r3 $r3
111001111	\\bne 15 NOROUND //always
	\\ROUND
000010101	\\addc $r1 $r1
000011100	\\addc $r0 $r3
	\\NOROUND
101100110	\\imme $r2 25 //Signloc
011011010	\\lw $r2 $r2
010111000	\\or $r0 $r2
101101110	\\imme $r2 27 //MSHend
101101011	\\imme $r3 26 //LSHend
011001000	\\sw $r0 $r2
011001101	\\sw $r1 $r3
011100000	\\HALT 0
	\\UNDERFLOW
101100100	\\imme $r0 25 //Signloc
011010000	\\lw $r0 $r0
101101101	\\imme $r1 27 //MSHend
011000100	\\sw $r0 $r1
011100001	\\halt 1
